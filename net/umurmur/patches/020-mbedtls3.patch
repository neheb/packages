--- a/src/crypt.h
+++ b/src/crypt.h
@@ -36,7 +36,6 @@
 
 #if defined(USE_MBEDTLS)
 
-#include <mbedtls/havege.h>
 #include <mbedtls/aes.h>
 
 #define CRYPT_AES_KEY mbedtls_aes_context
--- a/src/ssli_mbedtls.c
+++ b/src/ssli_mbedtls.c
@@ -37,10 +37,7 @@
 #include <stdlib.h>
 #include <fcntl.h>
 
-#include <mbedtls/config.h>
-#include <mbedtls/version.h>
-#include <mbedtls/havege.h>
-#include <mbedtls/certs.h>
+#include <mbedtls/build_info.h>
 #include <mbedtls/x509.h>
 #include <mbedtls/ssl.h>
 
@@ -70,7 +67,7 @@ static inline int x509parse_keyfile(mbed
     int ret;
 
     mbedtls_pk_init(pk);
-    ret = mbedtls_pk_parse_keyfile(pk, path, pwd);
+    ret = mbedtls_pk_parse_keyfile(pk, path, pwd, NULL, NULL);
     if (ret == 0 && !mbedtls_pk_can_do(pk, MBEDTLS_PK_ECDSA) && !mbedtls_pk_can_do(pk, MBEDTLS_PK_RSA))
 	{
         ret = MBEDTLS_ERR_PK_TYPE_MISMATCH;
@@ -187,7 +184,7 @@ void SSLi_init(void)
 #endif
 	mbedtls_ssl_conf_dbg(conf, pssl_debug, NULL);
 
-	mbedtls_ssl_conf_min_version(conf, MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1);
+	mbedtls_ssl_conf_min_version(conf, MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3);
 
 	mbedtls_ssl_conf_ciphersuites(conf, (const int*)&ciphers);
 
@@ -221,11 +218,7 @@ bool_t SSLi_getSHA1Hash(SSL_handle_t *ss
 	if (!cert) {
 		return false;
 	}
-#if MBEDTLS_VERSION_NUMBER < 0x02070000L
 	mbedtls_sha1(cert->raw.p, cert->raw.len, hash);
-#else
-	mbedtls_sha1_ret(cert->raw.p, cert->raw.len, hash);
-#endif
 	return true;
 }
 
